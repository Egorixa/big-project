@page "/register"
@using FrontSite.Models
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Регистрация</PageTitle>

<h3 class="text-center text-orange">Регистрация</h3>

<EditForm Model="@user" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="Name">Имя</label>
        <InputText id="Name" class="form-control" @bind-Value="user.Name" />
        <ValidationMessage For="@(() => user.Name)" />
    </div>

    <div class="form-group">
        <label for="Surname">Фамилия</label>
        <InputText id="Surname" class="form-control" @bind-Value="user.Surname" />
        <ValidationMessage For="@(() => user.Surname)" />
    </div>

    <div class="form-group">
        <label for="Email">Электронная почта</label>
        <InputText id="Email" class="form-control" @bind-Value="user.Email" />
        <ValidationMessage For="@(() => user.Email)" />
    </div>

    <div class="form-group">
        <label for="Password">Пароль</label>
        <InputText id="Password" class="form-control" type="password" @bind-Value="user.Password" />
        <ValidationMessage For="@(() => user.Password)" />
    </div>

    <div class="form-group">
        <label for="EducationStage">Этап образования</label>
        <InputSelect id="EducationStage" class="form-control" @bind-Value="user.Stage">
            <option value="Бакалавр">Бакалавр</option>
            <option value="Магистр">Магистр</option>
        </InputSelect>
        <ValidationMessage For="@(() => user.Stage)" />
    </div>

    <div class="form-group">
        <label for="Course">Курс</label>
        <InputNumber id="Course" class="form-control" @bind-Value="user.Course" />
        <ValidationMessage For="@(() => user.Course)" />
    </div>

    <div class="form-group">
        <label for="ProfileDescription">Описание профиля</label>
        <InputTextArea id="ProfileDescription" class="form-control" @bind-Value="user.ProfileDescription" />
        <ValidationMessage For="@(() => user.ProfileDescription)" />
    </div>

    <button type="submit" class="btn btn-orange w-100">Зарегистрироваться</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

@code {
    private User user = new User();
    private string errorMessage = string.Empty;

    private async Task HandleRegister()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:5027/api/users/register", user);

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/login");
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
            {
                // Явно указываем сообщение для конфликта
                errorMessage = "Пользователь с таким email уже зарегистрирован.";
            }
            else
            {
                errorMessage = "Произошла ошибка при регистрации. Пожалуйста, попробуйте снова.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Неожиданная ошибка: {ex.Message}";
        }
    }
}

<style>
    .form-group {
        margin-bottom: 15px;
    }

    .form-control {
        padding: 10px;
        font-size: 1rem;
        border-radius: 5px;
        border: 1px solid #ff6600;
    }

    .btn {
        padding: 10px;
        font-size: 1.1rem;
        margin-top: 10px;
        border-radius: 5px;
        border: none;
    }

    .btn-orange {
        background-color: #ff6600;
        color: white;
        width: 100%;
    }

    .btn-orange:hover {
        background-color: #cc5200;
    }

    .alert-danger {
        margin-top: 15px;
        background-color: #f8d7da;
        color: #721c24;
        border-color: #f5c6cb;
        padding: 15px;
        border-radius: 5px;
    }

    h3 {
        color: #ff6600;
        font-weight: bold;
        margin-bottom: 20px;
    }

    .text-center {
        text-align: center;
    }
</style>