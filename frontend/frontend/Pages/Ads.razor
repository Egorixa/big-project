@page "/ads"
@using System.Text.Json
@using Blazored.LocalStorage
@using frontend.Models
@inject HttpClient Http
@inject ILocalStorageService LocalStorage

<PageTitle>Объявления</PageTitle>

<h3 class="text-center text-orange">Объявления</h3>

<div class="filter-form card p-3 mb-4 shadow-sm border-orange">
    <div class="row g-2">
        <div class="col-md-3">
            <input @bind="filterTitle" placeholder="Заголовок" class="form-control border-orange" />
        </div>
        <div class="col-md-2">
            <input @bind="filterMinPrice" placeholder="Мин. цена" class="form-control border-orange" type="number" />
        </div>
        <div class="col-md-2">
            <input @bind="filterMaxPrice" placeholder="Макс. цена" class="form-control border-orange" type="number" />
        </div>
        <div class="col-md-3">
            <input @bind="filterStartDate" placeholder="Дата (гггг-мм-дд)" class="form-control border-orange" type="date" />
        </div>
        <div class="col-md-2">
            <button class="btn btn-orange w-100" @onclick="LoadAds">Фильтр</button>
        </div>
    </div>
</div>

@if (ads == null || ads.Count == 0)
{
    <p class="text-center">Нет объявлений</p>
}
else
{
    <table class="table table-hover shadow-sm border-orange">
        <thead class="table-orange">
        <tr>
            <th>Заголовок</th>
            <th>Описание</th>
            <th>Цена</th>
            <th>Дата</th>
            <th>Действия</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var ad in filteredAds)
        {
            <tr>
                <td>@ad.Title</td>
                <td>@ad.Description</td>
                <td>@(ad.Price.HasValue ? ad.Price.Value.ToString("C") : "Не указана")</td>
                <td>@ad.CreatedAt.ToString("dd.MM.yyyy")</td>
                <td>
                    @if (isUserLoggedIn)
                    {
                        <button class="btn btn-orange btn-sm" @onclick="() => OpenResponseDialog(ad)">Откликнуться</button>
                    }
                    else
                    {
                        <span>Пожалуйста, войдите для откликов.</span>
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@if (isResponseDialogOpen)
{
    <div class="response-modal-overlay">
        <div class="response-modal border-orange">
            <h4>Отклик на объявление: @selectedAd?.Title</h4>

            <div class="response-section p-3 border-orange">
                <h6 class="text-orange">Отклики:</h6>
                @foreach (var response in responses[selectedAd.Id])
                {
                    <p>Id-<strong>@response.UserId:</strong> @response.Message</p>
                }
            </div>

            <textarea @bind="responseMessage" placeholder="Введите сообщение" class="form-control border-orange"></textarea>
            <button class="btn btn-orange" @onclick="SubmitResponse">Отправить</button>
            <button class="btn btn-danger" @onclick="CloseResponseDialog">Отмена</button>
        </div>
    </div>
}

@code {
    private List<Ad> ads = new(); 
    private List<Ad> filteredAds = new();
    private Dictionary<int, List<Response>> responses = new();
    private string filterTitle = "";
    private decimal? filterMinPrice;
    private decimal? filterMaxPrice;
    private DateTime? filterStartDate;
    private bool isResponseDialogOpen = false;
    private string responseMessage = "";
    private Ad selectedAd;
    private bool isUserLoggedIn = false;

    protected override async Task OnInitializedAsync()
    {
        var userToken = await LocalStorage.GetItemAsync<string>("user");
        isUserLoggedIn = !string.IsNullOrEmpty(userToken);

        await LoadAds();
    }

    private async Task LoadAds()
    {
        ads = await Http.GetFromJsonAsync<List<Ad>>("http://localhost:5027/api/ads");
        ApplyFilters(); // Применяем фильтрацию сразу после загрузки
    }

    private void ApplyFilters()
    {
        filteredAds = ads.Where(ad =>
            (string.IsNullOrEmpty(filterTitle) || ad.Title.Contains(filterTitle, StringComparison.OrdinalIgnoreCase)) &&
            (!filterMinPrice.HasValue || (ad.Price.HasValue && ad.Price.Value >= filterMinPrice.Value)) &&
            (!filterMaxPrice.HasValue || (ad.Price.HasValue && ad.Price.Value <= filterMaxPrice.Value)) &&
            (!filterStartDate.HasValue || ad.CreatedAt.Date >= filterStartDate.Value.Date)
        ).ToList();
    }

    private async Task OpenResponseDialog(Ad ad)
    {
        selectedAd = ad;

        if (!isUserLoggedIn)
        {
            responseMessage = "Для отклика на объявление необходимо войти в систему.";
            return;
        }

        var url = $"http://localhost:5027/api/responses?adId={ad.Id}";
        var adResponses = await Http.GetFromJsonAsync<List<Response>>(url);
        responses[ad.Id] = adResponses;

        responseMessage = "";
        isResponseDialogOpen = true;
    }

    private void CloseResponseDialog()
    {
        isResponseDialogOpen = false;
    }

    private async Task SubmitResponse()
    {
        if (!isUserLoggedIn)
        {
            responseMessage = "Для отклика на объявление необходимо войти в систему.";
            return;
        }

        var userJson = await LocalStorage.GetItemAsync<string>("user");
        var user = JsonSerializer.Deserialize<User>(userJson!);
        if (user == null || user.Id == 0)
        {
            responseMessage = "Ошибка: пользователь не авторизован!";
            return;
        }

        var response = new Response
        {
            AdId = selectedAd.Id,
            UserId = user.Id,
            Message = responseMessage
        };

        var result = await Http.PostAsJsonAsync("http://localhost:5027/api/responses", response);
        if (result.IsSuccessStatusCode)
        {
            isResponseDialogOpen = false;
            await OpenResponseDialog(selectedAd);
        }
        else
        {
            responseMessage = "Ошибка при отправке отклика!";
        }
    }
}

<style>
    .btn-orange { background-color: #ff6600; color: white; border: none; }
    .btn-orange:hover { background-color: #cc5200; }
    .border-orange { border-color: #ff6600 !important; }
    .text-orange { color: #ff6600 !important; }
    .table-orange { background-color: #ff6600; color: white; }

    .response-modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .response-modal {
        background-color: white;
        border-radius: 8px;
        padding: 20px;
        width: 400px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    }
</style>