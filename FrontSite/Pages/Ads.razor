@page "/ads"
@using System.Text.Json
@using Blazored.LocalStorage
@using FrontSite.Models
@inject HttpClient Http
@inject ILocalStorageService LocalStorage

<PageTitle>Объявления</PageTitle>

<h3 class="text-center text-orange">Объявления</h3>

<div class="filter-form card p-3 mb-4 shadow-sm border-orange">
    <div class="row g-2">
        <div class="col-md-3">
            <input @bind="filterTitle" placeholder="Заголовок" class="form-control border-orange" />
        </div>
        <div class="col-md-2">
            <input @bind="filterMinPrice" placeholder="Мин. цена" class="form-control border-orange" type="number" />
        </div>
        <div class="col-md-2">
            <input @bind="filterMaxPrice" placeholder="Макс. цена" class="form-control border-orange" type="number" />
        </div>
        <div class="col-md-3">
            <input @bind="filterStartDate" placeholder="Дата (гггг-мм-дд)" class="form-control border-orange" type="date" />
        </div>
        <div class="col-md-2">
            <button class="btn btn-orange w-100" @onclick="LoadAds">Фильтр</button>
        </div>
    </div>
</div>

@if (ads == null || ads.Count == 0)
{
    <p class="text-center">Нет объявлений</p>
}
else
{
    <table class="table table-hover shadow-sm border-orange">
        <thead class="table-orange">
            <tr>
                <th>Заголовок</th>
                <th>Описание</th>
                <th>Цена</th>
                <th>Дата</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ad in ads)
            {
                <tr>
                    <td>@ad.Title</td>
                    <td>@ad.Description</td>
                    <td>@(ad.Price.HasValue ? ad.Price.Value.ToString("C") : "Не указана")</td>
                    <td>@ad.CreatedAt.ToString("dd.MM.yyyy")</td>
                    <td>
                        @if (isUserLoggedIn)
                        {
                            <button class="btn btn-orange btn-sm" @onclick="() => OpenResponseDialog(ad.Id)">Откликнуться</button>
                            <button class="btn btn-outline-orange btn-sm" @onclick="() => ToggleResponses(ad.Id)">Отклики</button>
                        }
                        else
                        {
                            <span>Пожалуйста, войдите для откликов.</span>
                        }
                    </td>
                </tr>
                @if (responses.ContainsKey(ad.Id))
                {
                    <tr>
                        <td colspan="5">
                            <div class="response-section p-3 border-orange">
                                <h6 class="text-orange">Отклики:</h6>
                                @foreach (var response in responses[ad.Id])
                                {
                                    <p><strong>@response.UserId:</strong> @response.Message</p>
                                }
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@if (isResponseDialogOpen)
{
    <div class="response-modal border-orange">
        <h4>Отклик на объявление</h4>
        <textarea @bind="responseMessage" placeholder="Введите сообщение" class="form-control border-orange"></textarea>
        <button class="btn btn-orange" @onclick="SubmitResponse">Отправить</button>
        <button class="btn btn-danger" @onclick="CloseResponseDialog">Отмена</button>
    </div>
}

@code {
    private List<Ad> ads = new();
    private Dictionary<int, List<Response>> responses = new();
    private string filterTitle = "";
    private decimal? filterMinPrice;
    private decimal? filterMaxPrice;
    private DateTime? filterStartDate;
    private bool isResponseDialogOpen = false;
    private string responseMessage = "";
    private int selectedAdId;
    private bool isUserLoggedIn = false;

    protected override async Task OnInitializedAsync()
    {
        var userToken = await LocalStorage.GetItemAsync<string>("user");
        isUserLoggedIn = !string.IsNullOrEmpty(userToken);
        
        await LoadAds();
    }

    private async Task LoadAds()
    {
        var url = "http://localhost:5027/api/ads";
        var filters = new List<string>();

        if (!string.IsNullOrEmpty(filterTitle))
            filters.Add($"title={filterTitle}");
        if (filterMinPrice.HasValue)
            filters.Add($"minPrice={filterMinPrice.Value}");
        if (filterMaxPrice.HasValue)
            filters.Add($"maxPrice={filterMaxPrice.Value}");
        if (filterStartDate.HasValue)
            filters.Add($"startDate={filterStartDate.Value:yyyy-MM-dd}");

        if (filters.Any())
            url += "?" + string.Join("&", filters);

        ads = await Http.GetFromJsonAsync<List<Ad>>(url);
    }

    private async Task ToggleResponses(int adId)
    {
        if (responses.ContainsKey(adId))
        {
            responses.Remove(adId);
        }
        else
        {
            var url = $"http://localhost:5027/api/responses?adId={adId}";
            var adResponses = await Http.GetFromJsonAsync<List<Response>>(url);
            responses[adId] = adResponses!;
        }
        StateHasChanged();
    }

    private void OpenResponseDialog(int adId)
    {
        if (!isUserLoggedIn)
        {
            responseMessage = "Для отклика на объявление необходимо войти в систему.";
            return;
        }

        selectedAdId = adId;
        responseMessage = "";
        isResponseDialogOpen = true;
    }

    private void CloseResponseDialog()
    {
        isResponseDialogOpen = false;
    }

    private async Task SubmitResponse()
    {
        if (!isUserLoggedIn)
        {
            responseMessage = "Для отклика на объявление необходимо войти в систему.";
            return;
        }

        var userJson = await LocalStorage.GetItemAsync<string>("user");
        var user = JsonSerializer.Deserialize<User>(userJson!);
        if (user == null || user.Id == 0)
        {
            responseMessage = "Ошибка: пользователь не авторизован!";
            return;
        }

        var response = new Response
        {
            AdId = selectedAdId,
            UserId = user.Id,
            Message = responseMessage
        };

        var result = await Http.PostAsJsonAsync("http://localhost:5027/api/responses", response);
        if (result.IsSuccessStatusCode)
        {
            isResponseDialogOpen = false;
            await ToggleResponses(selectedAdId);
        }
        else
        {
            responseMessage = "Ошибка при отправке отклика!";
        }
    }
}

<style>
    .btn-orange { background-color: #ff6600; color: white; border: none; }
    .btn-orange:hover { background-color: #cc5200; }
    .border-orange { border-color: #ff6600 !important; }
    .text-orange { color: #ff6600 !important; }
    .table-orange { background-color: #ff6600; color: white; }
</style>